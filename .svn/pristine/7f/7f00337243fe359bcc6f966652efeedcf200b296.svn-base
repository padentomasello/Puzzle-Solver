// This is a SUGGESTED skeleton file.  Throw it away if you don't use it.

package puzzle;

import java.io.Reader;
import static puzzle.EntityType.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.MatchResult;

/** A sequence of Assertions and Questions parsed from a given file.
 *  @author */
class Parser {
    private static final String STATE1 = "([A-Z][a-z]*)?(The\\s+([a-z]+))?\\s+(lives\\s+in|do" +
    		"es\\s+not\\s+live\\s+in)\\s+the\\s+([a-z]+)\\s+house\\.";
    private static final String STATE2 = "([A-Z][a-z]*)\\s+(is|is\\s+not)\\s+" +
    		"the\\s+([a-z]*)\\.";
    private static final String STATE3 = "([A-Z][a-z]*)?(The\\s+([a-z]+))?\\s+lives\\s+around\\s+here\\.";
    private static final String STATE4 = "There\\s+is\\s+a\\s+([a-z]+)\\s+house\\.";
    private static final String QUEST1 = "What\\s+do\\s+you\\s+know\\s+about\\s+([A-Z][a-z]*)?(the\\s+([a-z]+))?\\?";
    private static final String QUEST2 = "What\\s+do\\s+you\\s+know\\s+about" +
    		"\\s+the\\s+([a-z]+)\\s+house\\?";
    private static final String QUEST3 = "Who\\s+is\\s+the\\s+([a-z]+)\\?";
    private static final String QUEST4 = "Who\\s+lives\\s+in\\s+the\\s+([a-z]+)\\s+house\\?";
    private static final String QUEST5 = "What\\s+does\\s+the\\s+occupant\\s+of\\s+the\\s+([a-z]+)\\s+house+\\s+do\\?";
    private static final String QUEST6 = "What\\s+does\\s+([A-Z][a-z]*)\\s+do\\?";
    private static final String QUEST7 = "Where\\s+does\\s+([A-Z][a-z]*)?(the\\s+([a-z]+))?\\s+live\\?";
    private static final String[] stateArray = {STATE1, STATE2, STATE3, STATE4};       
    private static final String[] questArray = {QUEST1, QUEST2, QUEST3, QUEST4, QUEST5, QUEST6, QUEST7};
    private static ArrayList<String> stateStringArray = new ArrayList<String>(0);
    private static ArrayList<String> questStringArray = new ArrayList<String>(0);
    /** A new Parser, containing no assertions or questions. */
    private Parser() {
    }

    /** Returns a Parser that contains assertions and questions from
     *  READER. */
    static Parser parse(Reader reader) {
        Scanner inp = new Scanner(reader);
        Parser result = new Parser();
        String x = null;
        while (inp.hasNext()) {
            x = inp.findWithinHorizon(".*?(\\.|\\?)", 0).replaceAll("\\s+", " ").trim();
            if (inp.match().group(1).equals(".")) {
                stateStringArray.add(x);
            } else {
                questStringArray.add(x);
            }
        }
        return result;
    }
    /** Transfer all information conveyed by the asserations I have
     *  read to SOLVER. 
     * @throws Exception */
    void inform(Solver solver) throws Exception {
        String finalMatch = null;
        MatchResult groups = null;
        compileExistingEntities(solver);
        solver.buildPermutation();
        int i = 1; 
        for (String statement: stateStringArray) {
            System.out.println(i+". "+ statement);
            i += 1;
            Scanner stateScanner = new Scanner(statement);
            for (String match: stateArray) {
                if (statement.matches(match)) {
                    finalMatch = match;
                    stateScanner.findInLine(match);
                    groups = stateScanner.match();
                    break;
                }
            }
            NamedEntity e0, e1;
            if (finalMatch == STATE1) {
                if (groups.group(1) == null) {
                    e0 = new NamedEntity(groups.group(3), OCCUPATION);
                    e1 = new NamedEntity(groups.group(5), COLOR);
                } else {
                    e0 = new NamedEntity(groups.group(1), PERSON);
                    e1 = new NamedEntity(groups.group(5), COLOR);
                }
                if (groups.group(4).equals("lives in")) {
                    solver.associate(e0, e1);
                } else {
                    solver.disassociate(e0, e1);
                }
            }
            if (finalMatch == STATE2) {
                e0 = new NamedEntity(groups.group(1), PERSON);
                e1 = new NamedEntity(groups.group(3), OCCUPATION);
                    if (groups.group(2).equals("is")) {
                        solver.associate(e0, e1);
                    } else {
                        solver.disassociate(e0, e1);
                    }
            }
        }
        System.out.println("");
    }

    public void compileExistingEntities(Solver solver) {
        String finalMatch = null;
        MatchResult groups = null;
        for (String statement: stateStringArray) {
            Scanner stateScanner = new Scanner(statement);
            
            for (String match: stateArray) {
                if (statement.matches(match)) {
                    finalMatch = match;
                    stateScanner.findInLine(match);
                    groups = stateScanner.match();
                    break;
                }
            }
            NamedEntity name = null, occupation= null, color= null;
            if (finalMatch == STATE1) {
                if (groups.group(1) == null) {
                    occupation = new NamedEntity(groups.group(3), OCCUPATION);
                    color = new NamedEntity(groups.group(5), COLOR);
                    solver.exists(occupation);
                    solver.exists(color);
                } else {
                    name = new NamedEntity(groups.group(1), PERSON);
                    color = new NamedEntity(groups.group(5), COLOR);
                    solver.exists(name);
                    solver.exists(color);
                }
            }
            if (finalMatch == STATE2) {
                name = new NamedEntity(groups.group(1), PERSON);
                occupation = new NamedEntity(groups.group(3), OCCUPATION);
                solver.exists(name);
                solver.exists(occupation);
            }
            if (finalMatch == STATE3) {
                if (groups.group(2) == null) {
                    name = new NamedEntity(groups.group(1), PERSON);
                    solver.exists(name);
                } else {
                    occupation = new NamedEntity(groups.group(3), OCCUPATION);
                    solver.exists(occupation);
                }
            }
            if (finalMatch == STATE4) {
                color = new NamedEntity(groups.group(1), COLOR);
                solver.exists(color);
            }
        }
    }
    
    /** Returns the number of assertions I have parsed. */
    int numAssertions() {
        return stateStringArray.size();
    }

    /** Returns the text of assertion number K (numbering from 0), with extra
     *  spaces removed. */
    String getAssertion(int k) {
        return stateStringArray.get(k);
    }


    /** Returns the number of questions I have parsed. */
    int numQuestions() {
        return questStringArray.size();
    }

    /** Return the text of question number K (numbering from 0), with extra
     *  spaces removed. */
    String getQuestion(int k) {
        return questStringArray.get(k);
    }

    /** Return the answer to question K, according to the information
     *  in SOLVER. */
    String getAnswer(Solver solver, int k) {
        String finalMatch = null;
        MatchResult groups = null;
        String question = getQuestion(k);
        System.out.println("Q: "+ question);
        Scanner questScanner = new Scanner(question);
        for (String match: questArray) {
            if (question.matches(match)) {
                finalMatch = match;
                questScanner.findInLine(match);
                groups = questScanner.match();
                break;
            }
        }
        NamedEntity e, b, c;
        EntityTriple a;
        if (finalMatch == QUEST1) {
                if (groups.group(1) != null) {
                    e = new NamedEntity(groups.group(1), PERSON);
                } else {
                    e = new NamedEntity(groups.group(3), OCCUPATION);
                }
                a = solver.allInfo(e);
                if (a != null) {
                    return livesInAndOcc(a);
                }
                b = solver.getColor(e);
                if (b != null) {
                    return livesIn(e, b);
                }
                b = solver.getJob(e);
                if (b != null) {
                    return isOcc(e, b);
                }
            }
        if (finalMatch == QUEST2) {
            e = new NamedEntity(groups.group(1), COLOR);
            a = solver.allInfo(e);
            if (a != null) {
                return livesInAndOcc(a);
            }
            b = solver.getPeople(e);
            if (b != null) {
                return livesIn(b, e);
            }
            b = solver.getJob(e);
            if (b != null) {
                return livesIn(b, e);
            }
            
        }
        if (finalMatch == QUEST3) {
            e = new NamedEntity(groups.group(1), OCCUPATION);
            b = solver.getPeople(e);
            if (b != null) {
                return isOcc(b, e);
            }
        }
        if (finalMatch == QUEST4) {
            e = new NamedEntity(groups.group(1), COLOR);
            b = solver.getPeople(e);
            if (b != null) {
                return livesIn(b, e);
            }
        }
        if (finalMatch == QUEST5) {
            e = new NamedEntity(groups.group(1), COLOR);
            b = solver.getPeople(e);
            c = solver.getJob(e);
            if (b != null) {
                return isOcc(b, c);
            }
        }
        if (finalMatch == QUEST6) {
            e = new NamedEntity(groups.group(1), PERSON); 
            return getJob(solver, e);
        }
        if (finalMatch == QUEST7) {
            if (groups.group(2) == null) {
                e = new NamedEntity(groups.group(1), PERSON);
                   
            } else {
                e = new NamedEntity(groups.group(3), OCCUPATION);
            }
            b = solver.getColor(e);
            if (b != null) {
               return livesIn(e, b);
            }
        }
        return null;
    }
    public String livesIn(NamedEntity e0, NamedEntity e1) {
        if (e0.getType() == PERSON) {
            return ("A: " + e0.getName()+ " lives in the " + e1.getName() + " house.");
        }
        return ("A: The " + e0.getName()+ " lives in the " + e1.getName() + "house.");
    }
    
    public String livesInAndOcc(EntityTriple e) {
       return ("A: " + e.name().getName()+ " is the " + e.job().getName() + " a" +
            		"nd lives in the " + e.color().getName() + " house.");

    }
    
    public String isOcc(NamedEntity e0, NamedEntity e1) {
        return ("A: " + e0.getName() + " is the " + e1.getName()+".");
    }
 /**   String getInfoOn(Solver solver, NamedEntity e) {
        EntityTriple a;;
        a = solver.allInfo(e);
        if (a != null); {
            return (a.name()+ " is the " + a.job() + " and lives in the " + a.color() +"house.");
        }
        a = solver.getColor(e);
        if (a != null) {
            return ()
        }
    } */
    String getPerson(Solver solver, NamedEntity e) {return null;}
    String getJob(Solver solver, NamedEntity e) {return null;}
    String getColorOf(Solver solver, NamedEntity e) {return null;} 
}


